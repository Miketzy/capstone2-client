import React, { useState } from "react";
import axios from "axios"; // Import axios
import "./Quizzes.css";

const questions = [
  {
    question: "What is the largest bird of prey found in Davao Oriental?",
    options: [
      "A. Philippine Eagle",
      "B. Brahminy Kite",
      "C. Peregrine Falcon",
      "D. Hawksbill Turtle",
    ],
    answer: "A. Philippine Eagle",
  },
  // ... other questions ...
  {
    question: "Which endangered species is a large wild pig endemic to the Philippines?",
    options: [
      "A. Philippine Warty Pig",
      "B. Tamaraw",
      "C. Mindanao Wild Boar",
      "D. Dugong",
    ],
    answer: "A. Philippine Warty Pig",
  },
];

const Quizzes = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showScore, setShowScore] = useState(false);
  const [userAnswers, setUserAnswers] = useState(
    Array(questions.length).fill(null)
  );

  const handleAnswerClick = (option) => {
    const updatedAnswers = [...userAnswers];
    updatedAnswers[currentQuestion] = option;
    setUserAnswers(updatedAnswers);

    if (option === questions[currentQuestion].answer) {
      setScore(score + 1);
    }

    const nextQuestion = currentQuestion + 1;
    if (nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    } else {
      setShowScore(true);
      saveScore(); // Call saveScore function when the quiz is complete
    }
  };

  const saveScore = async () => {
    try {
      const token = localStorage.getItem("token"); // Assuming you're storing the token in localStorage
      const response = await axios.post(
        "http://localhost:8081/api/save-score",
        { score },
        {
          headers: {
            Authorization: `Bearer ${token}`, // Include the token in the Authorization header
          },
        }
      );
      console.log(response.data.message); // Log success message
    } catch (error) {
      console.error("Error saving score:", error);
    }
  };

  const handleBack = () => {
    const prevQuestion = currentQuestion - 1;
    if (prevQuestion >= 0) {
      setCurrentQuestion(prevQuestion);
    }
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setScore(0);
    setShowScore(false);
    setUserAnswers(Array(questions.length).fill(null)); // Reset answers
  };

  return (
    <div className="wrapper">
      <div className="quiz-container">
        <h2>Davao Oriental Species Quiz</h2>
        {showScore ? (
          <div className="score-section">
            <p>
              Your Score: {score} out of {questions.length}
            </p>
            <button className="restart-quiz" onClick={handleRestart}>
              Restart Quiz
            </button>
          </div>
        ) : (
          <div className="question-card">
            <h3>{questions[currentQuestion].question}</h3>
            <div className="options">
              {questions[currentQuestion].options.map((option, index) => (
                <button
                  key={index}
                  className="option-button"
                  onClick={() => handleAnswerClick(option)}
                >
                  {option}
                </button>
              ))}
            </div>
            <p className="progress">
              Question {currentQuestion + 1} of {questions.length}
            </p>
            <div className="navigation-buttons">
              {currentQuestion > 0 && (
                <button className="back-button" onClick={handleBack}>
                  Back
                </button>
              )}
            </div>
          </div>
        )}
      </div>
      <br />
    </div>
  );
};

export default Quizzes;
